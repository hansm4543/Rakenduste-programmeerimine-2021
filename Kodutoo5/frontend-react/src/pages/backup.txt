import 'antd/dist/antd.css';
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import { Table, Input, InputNumber, Popconfirm, Form, Typography } from 'antd';
const originData = [];

function Posts(){


    //state on hook  isloading on muutuja ja setisloading on funktsioon millega muutuja v22rust muudame
    const [isLoading, setIsLoading] = useState(true);
    const [loadedItems, setIsLoadedItems] = useState([]);

    //useeffekt on selline hook, mis ytleb mis hetkedel ta kordub ja millal ta l6petab korduse
    useEffect(() =>{

        fetch('http://localhost:8081/api/post/').then(res => {
            return res.json();
        }).then( data => {
            console.log(data);
            setIsLoading(false);

            setIsLoadedItems(data);
        });
    
    },[])

    if(isLoading == true){
        return(
        <div>
            Laeb...
        </div>);
    }
    

    const EditableCell = ({
        editing,
        dataIndex,
        title,
        inputType,
        record,
        index,
        children,
        ...restProps
    }) => {
    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;
    return (
        <td {...restProps}>
        {editing ? (
            <Form.Item
            name={dataIndex}
            style={{
                margin: 0,
            }}
            rules={[
                {
                required: true,
                message: `Please Input ${title}!`,
                },
            ]}
            >
            {inputNode}
            </Form.Item>
        ) : (
            children
        )}
        </td>
    );
    };
    
    const EditableTable = () => {
    const [form] = Form.useForm();
    const [data, setData] = useState(loadedItems);
    const [editingKey, setEditingKey] = useState('');
    
    const isEditing = (record) => record.key === editingKey;
    
    const edit = (record) => {
        form.setFieldsValue({
        title: '',
        text: '',
        firstName: '',
        lastName: '',
        createdAt: '',
        ...record,
        });
        setEditingKey(record.key);
    };
    
    const cancel = () => {
        setEditingKey('');
    };
    
    const save = async (key) => {
        try {
        const row = await form.validateFields();
        const newData = [...data];
        const index = newData.findIndex((item) => key === item.key);
    
        if (index > -1) {
            const item = newData[index];
            newData.splice(index, 1, { ...item, ...row });
            setData(newData);
            setEditingKey('');
        } else {
            newData.push(row);
            setData(newData);
            setEditingKey('');
        }
        } catch (errInfo) {
        console.log('Validate Failed:', errInfo);
        }
    };
    
    const columns = [
        {
        title: 'Title',
        dataIndex: 'title',
        width: '15%',
        editable: true,
        },
        {
        title: 'Text',
        dataIndex: 'text',
        width: '15%',
        editable: true,
        },
        {
        title: 'First Name',
        dataIndex: 'firstName',
        width: '15%',
        editable: true,
        },
        {
        title: 'Last Name',
        dataIndex: 'lastName',
        width: '15%',
        editable: true,
        },
        {
        title: 'Date',
        dataIndex: 'createdAt',
        width: '15%',
        editable: true,
        },
        {
        title: 'operation',
        dataIndex: 'operation',
        render: (_, record) => {
            const editable = isEditing(record);
            return editable ? (
            <span>
                <a
                href="javascript:;"
                onClick={() => save(record.key)}
                style={{
                    marginRight: 8,
                }}
                >
                Save
                </a>
                <Popconfirm title="Sure to cancel?" onConfirm={cancel}>
                <a>Cancel</a>
                </Popconfirm>
            </span>
            ) : (
            <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>
                Edit
            </Typography.Link>
            );
        },
        },
    ];
    const mergedColumns = columns.map((col) => {
        if (!col.editable) {
        return col;
        }
    
        return {
        ...col,
        onCell: (record) => ({
            record,
            inputType: col.dataIndex === 'age' ? 'number' : 'text',
            dataIndex: col.dataIndex,
            title: col.title,
            editing: isEditing(record),
        }),
        };
    });
    return (
        <Form form={form} component={false}>
        <Table
            components={{
            body: {
                cell: EditableCell,
            },
            }}
            bordered
            dataSource={data}
            columns={mergedColumns}
            rowClassName="editable-row"
            pagination={{
            onChange: cancel,
            }}
        />
        </Form>
    );
    };
    

    return(
        <div>
            <h1>Postitused</h1>
            <EditableTable />
        </div>
    )
}
export default Posts;